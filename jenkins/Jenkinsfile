pipeline {
    agent any

    triggers {
        cron 'H/30 * * * *' // Ex√©cute toutes les 30 minutes
    }

    environment {
        DOCKER_CONFIG = '/tmp/.docker'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    sh 'docker info'
                    sh 'mvn -B -DskipTests clean package'
                }
            }
        }

        stage('Test') {
            steps {
                sh 'docker info'
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        mvn clean verify sonar:sonar \
                          -Dsonar.projectKey=ajava-maven-project \
                          -Dsonar.projectName="ajava-maven-project" \
                          -Dsonar.host.url=http://localhost:9000 \
                          -Dsonar.token=$SONAR_TOKEN
                    '''
                }
            }
        }

        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    def name = sh(script: "mvn -q -DforceStdout help:evaluate -Dexpression=project.name | grep -Ev '(^\\[|Download)'", returnStdout: true).trim()
                    def version = sh(script: "mvn -q -DforceStdout help:evaluate -Dexpression=project.version | grep -Ev '(^\\[|Download)'", returnStdout: true).trim()
                    sh "docker build -t ${name}:${version} ."
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    def name = sh(script: "mvn -q -DforceStdout help:evaluate -Dexpression=project.name | grep -Ev '(^\\[|Download)'", returnStdout: true).trim()
                    def version = sh(script: "mvn -q -DforceStdout help:evaluate -Dexpression=project.version | grep -Ev '(^\\[|Download)'", returnStdout: true).trim()
                    withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                        sh """
                            echo $dockerHubPassword | docker login -u $dockerHubUser --password-stdin
                            docker tag ${name}:${version} $dockerHubUser/${name}:${version}
                            docker push $dockerHubUser/${name}:${version}
                        """
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    def name = sh(script: "mvn -q -DforceStdout help:evaluate -Dexpression=project.name | grep -Ev '(^\\[|Download)'", returnStdout: true).trim()
                    def version = sh(script: "mvn -q -DforceStdout help:evaluate -Dexpression=project.version | grep -Ev '(^\\[|Download)'", returnStdout: true).trim()
                    withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                        def containerName = "${name}-${version}-${env.BUILD_NUMBER}".replaceAll("[^a-zA-Z0-9_.-]", "-")
                        sh "docker run -d --name ${containerName} $dockerHubUser/${name}:${version}"
                    }
                }
            }
        }
    }
}
